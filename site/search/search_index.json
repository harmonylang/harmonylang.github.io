{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Harmony Our online documentation is still a work in progress. For more complete documentation see the textbook . Overview Quick Start - Get started with Harmony. Language Reference - Coming Soon . Library Reference - Coming Soon . Changelog - What's new in Harmony 1.0.","title":"Overview"},{"location":"#harmony","text":"Our online documentation is still a work in progress. For more complete documentation see the textbook .","title":"Harmony"},{"location":"#overview","text":"Quick Start - Get started with Harmony. Language Reference - Coming Soon . Library Reference - Coming Soon . Changelog - What's new in Harmony 1.0.","title":"Overview"},{"location":"changelog/","text":"Changelog v1.0 Rewrote model checker in C for much faster performance Removed semicolons as a syntax requirement Updated imports syntax Requires Python3 and GCC in path to run v0.9 Initial release of the Harmony Language Model checker for concurrent programs HTML output with steps and shortest path to failure Required Python3 to run","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#v10","text":"Rewrote model checker in C for much faster performance Removed semicolons as a syntax requirement Updated imports syntax Requires Python3 and GCC in path to run","title":"v1.0"},{"location":"changelog/#v09","text":"Initial release of the Harmony Language Model checker for concurrent programs HTML output with steps and shortest path to failure Required Python3 to run","title":"v0.9"},{"location":"guides/installation/","text":"Installation Requirements Harmony requires both Python 3 and the GCC compiler. Both must be on your PATH environment variable for Harmony to function. MacOS and Linux Download and install Python 3 Open terminal and verify that the python3 command works If not, add export PATH=/usr/local/share/python:$PATH to your ~/.bash_profile and/or ~/.zshrc Open terminal and verify that the gcc command works If not, install GCC, either through Homebrew on Mac ( brew install gcc ) or apt-get on Ubuntu and other distros ( sudo apt-get install build-essential ) Windows Download and install Python 3 Open terminal and verify that the python3 command works If not, add your python install directory to your PATH Install GCC (http://mingw-w64.org/doku.php). At the Settings window, make sure you select the x86-64 architecture (instead of the default i686) during installation After installation is complete, add {installation path}\\mingw64\\bin to your PATH environment variable Open CMD and verify that the gcc command works Compiler Only Download and unzip the Harmony compiler Add harmony's directory to your PATH environment variable see http://www.linux-migration.org/ch02s06.html If you run harmony in the harmony directory, you may have to run \"./harmony [args ...]\" instead of just \"harmony [args ...]\" HarmonyLang - VSCode Extension Download and Install Visual Studio Code Install the HarmonyLang extension from the Extension Marketplace","title":"Installation"},{"location":"guides/installation/#installation","text":"","title":"Installation"},{"location":"guides/installation/#requirements","text":"Harmony requires both Python 3 and the GCC compiler. Both must be on your PATH environment variable for Harmony to function.","title":"Requirements"},{"location":"guides/installation/#macos-and-linux","text":"Download and install Python 3 Open terminal and verify that the python3 command works If not, add export PATH=/usr/local/share/python:$PATH to your ~/.bash_profile and/or ~/.zshrc Open terminal and verify that the gcc command works If not, install GCC, either through Homebrew on Mac ( brew install gcc ) or apt-get on Ubuntu and other distros ( sudo apt-get install build-essential )","title":"MacOS and Linux"},{"location":"guides/installation/#windows","text":"Download and install Python 3 Open terminal and verify that the python3 command works If not, add your python install directory to your PATH Install GCC (http://mingw-w64.org/doku.php). At the Settings window, make sure you select the x86-64 architecture (instead of the default i686) during installation After installation is complete, add {installation path}\\mingw64\\bin to your PATH environment variable Open CMD and verify that the gcc command works","title":"Windows"},{"location":"guides/installation/#compiler-only","text":"Download and unzip the Harmony compiler Add harmony's directory to your PATH environment variable see http://www.linux-migration.org/ch02s06.html If you run harmony in the harmony directory, you may have to run \"./harmony [args ...]\" instead of just \"harmony [args ...]\"","title":"Compiler Only"},{"location":"guides/installation/#harmonylang-vscode-extension","text":"Download and Install Visual Studio Code Install the HarmonyLang extension from the Extension Marketplace","title":"HarmonyLang - VSCode Extension"},{"location":"guides/introduction/","text":"Introduction Harmony is a Python-like programming language for testing and experimenting with concurrent programs. Instead of \"running\" code, Harmony programs are model-checked so that all corner cases are explored. If there is a problem, Harmony provides a short but detailed example of an execution that leads to the problem. Here is Peterson's Algorithm in Harmony, along with code to verify mutual exclusion: flags = [ False, False ] turn = choose({0, 1}) in_cs = [ False, False ] # to check mutual exclusion def process(self): # Enter critical section flags[self] = True turn = 1 - self while flags[1 - self] and (turn == (1 - self)): pass # Critical section is here in_cs[self] = True assert not in_cs[1 - self] in_cs[self] = False # Leave critical section flags[self] = False spawn process(0) spawn process(1) Harmony allows two sources of non-determinism: interleaving of concurrent process executions and choose(S) expressions that select some element from set S. Running Harmony finds that no interleaving and no possible choices lead to the assertion being violated. Moreover, Harmony also finds that processes do not get stuck, indefinitely waiting to enter the critical section. Learning programming in Harmony should be straightforward to those familiar with Python or similar languages. Harmony is described in a free book with many programming examples. Although in PDF format, the book has many hyperlinks to simplify navigation.","title":"Introduction"},{"location":"guides/introduction/#introduction","text":"Harmony is a Python-like programming language for testing and experimenting with concurrent programs. Instead of \"running\" code, Harmony programs are model-checked so that all corner cases are explored. If there is a problem, Harmony provides a short but detailed example of an execution that leads to the problem. Here is Peterson's Algorithm in Harmony, along with code to verify mutual exclusion: flags = [ False, False ] turn = choose({0, 1}) in_cs = [ False, False ] # to check mutual exclusion def process(self): # Enter critical section flags[self] = True turn = 1 - self while flags[1 - self] and (turn == (1 - self)): pass # Critical section is here in_cs[self] = True assert not in_cs[1 - self] in_cs[self] = False # Leave critical section flags[self] = False spawn process(0) spawn process(1) Harmony allows two sources of non-determinism: interleaving of concurrent process executions and choose(S) expressions that select some element from set S. Running Harmony finds that no interleaving and no possible choices lead to the assertion being violated. Moreover, Harmony also finds that processes do not get stuck, indefinitely waiting to enter the critical section. Learning programming in Harmony should be straightforward to those familiar with Python or similar languages. Harmony is described in a free book with many programming examples. Although in PDF format, the book has many hyperlinks to simplify navigation.","title":"Introduction"},{"location":"guides/running-harmony/","text":"Running your first Harmony program Coming Soon","title":"Running a program"},{"location":"guides/running-harmony/#running-your-first-harmony-program","text":"Coming Soon","title":"Running your first Harmony program"},{"location":"reference/textbook/","text":"Textbook The Harmony textbook, written by Prof. Robbert Van Renesse at Cornell University, remains the primary source of documentation for the Harmony language. It contains the documentation for the language and built-in libraries, along with a full course on concurrent programming. Download the latest version: - PDF: Link The Harmony Textbook is licenced under the terms of the Creative Commons Attribution NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0) at http://creativecommons.org/licenses/by-nc-sa/4.0 .","title":"Textbook"},{"location":"reference/textbook/#textbook","text":"The Harmony textbook, written by Prof. Robbert Van Renesse at Cornell University, remains the primary source of documentation for the Harmony language. It contains the documentation for the language and built-in libraries, along with a full course on concurrent programming. Download the latest version: - PDF: Link The Harmony Textbook is licenced under the terms of the Creative Commons Attribution NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0) at http://creativecommons.org/licenses/by-nc-sa/4.0 .","title":"Textbook"}]}
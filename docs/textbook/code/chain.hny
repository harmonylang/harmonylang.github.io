const NREPLICAS = 3     # number of replicas
const NOPS = 3          # number of operations

network = {}            # the network is a set of messages

def send(m):
    atomically network |= { m }

def receive(predecessor):
    result = { payload for (id, payload) in network where (id == predecessor) }

def replica(self, immortal):
    var hist, predecessors = [], { 0 .. self - 1 }
    while choose({ immortal, True }) and (len(hist) < NOPS):
        if predecessors == {}:  # I'm the head
            atomically when exists update in receive("client")
                                    when update not in hist:
                hist += [update,]
                send(self, hist)
        else:                   # I'm not the head (yet)
            atomically when exists payload in receive(max(predecessors)):
                if payload == "crash":
                    predecessors -= { max(predecessors) }
                elif (len(payload) > len(hist)) and
                        all(hist[i] == payload[i] for i in {0..len(hist)-1}):
                    hist = payload
                    send(self, hist)
    if len(hist) == NOPS:    # successful completion
        print hist
    else:       # replica crashed
        send(self, "crash")

def client(self):
    send("client", self)

let survivor = choose({ 0 .. NREPLICAS - 1 }):
    for i in { 0 .. NREPLICAS - 1 }:
        spawn replica(i, i == survivor)
for i in {1..NOPS}:
    spawn client(i)

{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v122769","title":"v1.2.2769","text":"<ul> <li>Added direct run option</li> <li>Added detail to output and output files</li> <li>Improved operator explainations</li> <li>Improved browser visualizations</li> <li>Updated modules with additional built-ins</li> <li>Renamed <code>name</code> to <code>entry</code></li> <li>Removed <code>atLabel</code> entirely</li> <li>Greatly improved performance</li> <li>Added documentation</li> <li>Bug fixes</li> </ul>"},{"location":"changelog/#v122376","title":"v1.2.2376","text":"<ul> <li>Added print statements</li> <li>Added DFA output graphs</li> <li>Removed the <code>@</code> tag from labeled statements</li> <li>Bug fixes</li> </ul>"},{"location":"changelog/#v120","title":"v1.2.0","text":"<ul> <li>Added <code>let-when</code> statements</li> <li>Renamed <code>once</code> to <code>when</code></li> <li>Added <code>possibly</code> statement</li> <li>Added <code>atomically</code></li> <li>Added \"-i\" flag</li> <li>All labels within a module are now global</li> <li>Replaced all non-constant \"let\" with \"var</li> <li>Atomic blocks / assertion checking now \"lazy\"</li> <li>Improved error reporting</li> <li>Improved parsing and robustness</li> <li>Bug fixes</li> </ul>"},{"location":"changelog/#v11","title":"v1.1","text":"<ul> <li>Now detects busy waiting and data races</li> <li>New <code>sequential</code> keyword to tag sequentially consistent variables </li> <li>Removed \"interlock\" term</li> <li>Improved error reporting</li> <li>Improved parsing and robustness</li> <li>Bug fixes</li> </ul>"},{"location":"changelog/#v10","title":"v1.0","text":"<ul> <li>Rewrote model checker in C for much faster performance</li> <li>Removed semicolons as a syntax requirement</li> <li>Updated imports syntax</li> <li>Requires Python3 and GCC in path to run</li> </ul>"},{"location":"changelog/#v09","title":"v0.9","text":"<ul> <li>Initial release of the Harmony Language</li> <li>Model checker for concurrent programs</li> <li>HTML output with steps and shortest path to failure</li> <li>Required Python3 to run</li> </ul>"},{"location":"install/","title":"Installing and Running Harmony","text":"<p>Harmony requires the following to be installed:</p> <ol> <li>Python (version 3.6 or higher)</li> <li>Graphviz</li> <li>C Compiler (potentially potential)</li> </ol> <p>In the following instructions, Windows users using WSL should follows instructions for Linux.</p> <p>For users of a Cornell CS Department Linux machine, e.g. <code>&lt;netid&gt;@ugclinux.cs.cornell.edu</code>, you likely do not need to install <code>Python3</code> or <code>Graphviz</code> because they may be available already. However, you can verify that they are available by running <code>python3 --version</code> and <code>dot -V</code> respectively.</p>"},{"location":"install/#installing-python3","title":"Installing Python3","text":"<p>Harmony requires Python (version 3.6 or higher) to be installed. If you do not have Python3 already installed, download and install Python depending on your OS (Windows, Mac, Linux, etc) on the official Python site. Be sure to download the installer for Python version <code>3.6</code> or higher.</p> <p>In the installer, the default installation settings will also add <code>pip</code>. If you choose to run the installer with custom settings, be sure that <code>pip</code> gets installed.</p> <p>On the command line, you can check if Python has been successfully installed by running the following:</p> <pre><code>python3 --version\n</code></pre>"},{"location":"install/#installing-graphviz","title":"Installing Graphviz","text":"<p>Harmony uses Graphviz to visualize the state changes in a program. For example, the following Harmony program can produce the subsequent graph.</p> <pre><code># Filename: example.hny\ndef a():\n    print \"A\"\n\ndef b():\n    print \"B\"\n\nspawn a()\nspwan b()\n\n# Run with [harmony -o example.png example.hny]\n</code></pre> <p></p> <p>Instructions for installing the latest version of Graphviz can be found here.</p> <p>For Windows users, when running the installer, make sure to select the option Add Graphviz to the system PATH for current user so that the command <code>dot</code> is available to produce the graphs.</p>"},{"location":"install/#install-harmony-via-pip","title":"Install Harmony via Pip","text":"<p>After installing <code>python</code>, you should also be able to use the command <code>pip</code>. Run the following command to get the latest version of Harmony:</p> <pre><code>pip install harmony\n</code></pre>"},{"location":"install/#for-windows-users","title":"For Windows Users","text":"<p>For Windows users: you may encounter the error message along the lines of the following when installing <code>harmony</code>:</p> <pre><code>error: Microsoft Visual C++ 14.0 or greater is required. Get it with\n\"Microsoft C++ Build Tools\": &lt;link to visual studio - cpp build tools&gt;\n</code></pre> <p>This is to be expected if you had not installed the \"Microsoft C++ Build Tools\" before. Navigate to the outputted link and press <code>Download Build Tools</code> to download the installer. When you run the installer, you will encounter a selection screen such as the following:</p> <p></p> <p>Select <code>Desktop development with C++</code> in the <code>Desktop &amp; Mobile</code> section and then install.</p> <p></p> <p>Note that this will likely take a while. When it finishes installing, run <code>pip install harmony</code> again.</p>"},{"location":"install/#for-cs-deparment-linux-machine-users","title":"For CS Deparment Linux Machine Users","text":"<p>It may be possible that <code>pip</code> is not available on your Linux machine. In that case, you will need to download and build the source code directly. This can be done via the following commands:</p> <pre><code># Installs version 1.2.2376\nwget https://files.pythonhosted.org/packages/4f/da/25219ab62a53f222b71f4c249d317b7952e95e36b4523b84809fb2a30412/harmony-1.2.3126.tar.gz\ngzip -d harmony-1.2.3126.tar.gz\ntar -xf harmony-1.2.3126.tar.gz\ncd harmony-1.2.3126\npython3 setup.py install --user\n</code></pre> <p>Afterward, you will likely need to add the directory with the <code>harmony</code> command to your environment <code>PATH</code>. You can get the directory with the script by running <code>python3 -m site --user-base</code>, which will output something like <code>/home/&lt;net-id&gt;/.local</code>. Add this directory to your <code>PATH</code> (See here for more information on how to do so).</p>"},{"location":"install/#adding-scripts-to-path","title":"Adding Scripts to PATH","text":"<p>When installing Harmony, you may encounter a warning on the command line of something like the following:</p> <pre><code>WARNING: The script harmony is installed in '/path/with/harmony/' which is not on PATH.\n  Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.\n</code></pre> <p>If you do not see this warning, then you can continue.</p> <p>Otherwise, add that path displayed in the message to your <code>PATH</code> variable. See here for extra information on editing the <code>PATH</code> variable.</p>"},{"location":"install/#command-line-harmony","title":"Command-Line Harmony","text":"<p>Once you have installed <code>harmony</code>, you should be able to use the <code>harmony</code> command on your command line.</p> <p>You check which version you have by running <code>harmony --version</code>.</p>"},{"location":"install/#harmony-on-vscode","title":"Harmony on VSCode","text":"<p>Harmony is available as an extension on VSCode, which includes syntax highlighting and basic parser checks.</p> <p>Please see here for a guide on the basic usage of the VSCode extension.</p>"},{"location":"install/#updating-harmony","title":"Updating Harmony","text":"<p>Harmony can be updated by running the following <code>pip</code> command on the command line:</p> <pre><code>pip install --upgrade harmony\n</code></pre> <p>In Harmony versions <code>1.2.0</code> and higher, the compiler will output a warning if the currently installed version of Harmony is outdated and an updated one can be installed.</p>"},{"location":"install/#modifying-your-path-variable","title":"Modifying your PATH variable","text":"<p>Windows:</p> <p>Search for Edit environment variables in the search bar. You can add it either to the <code>Path</code> associated with your account or the system <code>Path</code>.</p> <p></p> <p>Select the variable <code>Path</code> in the user variables section and then click \"Edit\", which opens a new pane.</p> <p></p> <p>Click \"New\" to add a new path, for example, the directory containing <code>gcc</code> or the <code>pip</code> scripts.</p> <p></p> <p>Complete your changes by pressing \"Ok\".</p> <p>MacOS / Linux:</p> <p>Open the Terminal application. Check which shell is running on the Terminal. You check which one you have by running <code>echo \"$SHELL\"</code>.</p> <p>The following instructions are for <code>bash</code> and <code>zsh</code>. Open the <code>~/.bash_profile</code> file (for bash users) or the <code>~/.zsh_profile</code> file (for zsh users) using your favorite text editor, such as <code>vim</code>, <code>nano</code>, <code>emacs</code>, or <code>TextEdit</code>. Then, add the following command to the end of the file, where <code>/path/to/add</code> is to be substituted:</p> <pre><code>export PATH=$PATH:/path/to/add/\n</code></pre> <p>Save the file and restart the Terminal to observe the change.</p>"}]}
from synch import Lock, acquire, release

sequential t_done, i_done

count = 0
countlock = Lock()
t_done = i_done = [ False, False ]

def increment():
    let prior = setintlevel(True):
        acquire(?countlock)
        count += 1
        release(?countlock)
        setintlevel(prior)

def handler(self):
    increment()
    i_done[self] = True

def thread(self):
    trap handler(self)
    increment()
    await i_done[self]
    t_done[self] = True
    await all(t_done)
    assert count == 4

spawn thread(0)
spawn thread(1)
